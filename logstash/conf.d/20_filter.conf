filter {

    if [message] =~ "MSWinEventLog" {
	mutate { replace => { "type" => "winlog" } }
	grok {
	    patterns_dir => "/etc/logstash/patterns"
	    match => ["message", "%{SYSLOGTIMESTAMP}\s+%{SYSLOGHOST:sourcehost}\s%{WORD:syslogprog}\t%{NUMBER:criticality}\t%{WORD:eventlogsource}\t[0-9-]+\t[a-zA-Z0-9:\ ]+\t%{NUMBER:eventid}\t%{WORD:winsource}\t%{NOTSPACE:username}\t%{WORD:sidtype}\t%{SNAREMESS:eventlogtype}\t%{SNAREMESS:winname}\t%{SNAREMESS:categorystring}\t+%{SNAREMESS:datastring}.*"]
	}
    }
    else if [message] =~ "Secure_Maillog" {
	mutate { replace => { "type" => "maillog" } }
	grok {
	    patterns_dir => "/etc/logstash/patterns"
	    #match => ["message", "<134>%{SYSLOGTIMESTAMP}\s+%{SYSLOGHOST:sourcehost}\s+%{WORD:syslogprog}:\s+%{NUMBER:timestamp}\t%{EMAIL:source}\t%{EMAIL:destination}\t%{NUMBER:size:int}\t%{GREEDYDATA:subject}"]
	    match => ["message", ".*Secure_Maillog:\s+%{NUMBER:timestamp}\t%{EMAIL:source}\t%{EMAIL:destination}\t%{NUMBER:size:int}\t%{GREEDYDATA:subject}"]
	}
	date {
	    locale => "en"
	    match => ["timestamp", "UNIX"]
	}
    }
    else if [message] =~ "(squid)" {
	mutate { replace => { "type" => "proxylog" } }
	grok {
		match => ["message", "<14>%{SYSLOGTIMESTAMP}\s+%{SYSLOGHOST:sourcehost}\s+\(%{WORD:syslogprog}\):\s+%{NUMBER:timestamp}\s+%{NUMBER:request_msec}\s+%{IPORHOST:client}\s+%{WORD:cache_result}/%{NUMBER:status}\s+%{NUMBER:size:int}\s+%{WORD:http_type}\s+(%{URIPROTO}://)?(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST:urihost})?(?:%{URIPATHPARAM})?\s+(%{WORD:username}|-)\s+%{WORD:request_route}/(%{IPORHOST:forwarded_to}|-)\s+%{NOTSPACE:content_type}\s+%{NUMBER:send_size:int}\s+(%{URI:referer}|-)"]
	}
    }
    else if [message] =~ "nginx-access" {
	mutate { replace => { "type" => "extwwwlog" } }
	grok {
	    pattern => "%{COMBINEDAPACHELOG}"
	}
	geoip {
	    source => clientip
	    database => "/etc/logstash/geoip/GeoLiteCity.dat"
	}
	mutate { convert => [ "bytes", "integer" ] }
	#date {
	#    type => "apache-access"
	#    timestamp => "dd/MMM/yyyy:HH:mm:ss Z"
	#}
    }
    else if [message] =~ "calls2syslog" {
	mutate {
	    replace => { "type" => "phonelog" }
	}
	grok {
	    pattern => ".*calls2syslog.pl: %{YEAR} %{SYSLOGTIMESTAMP:timestamp} %{INT:source:int} --[->] %{INT:destination:int} %{INT:time:int} sec."
	}
	date {
	    locale => "en"
	    match => [ "timestamp" , "MMM dd HH:mm:ss" ]
	}
    }
    else if [message] =~ "1C8 Srvr=" {
	mutate { replace => { "type" => "1clog" } }
	grok {
		match => ["message", "<134>%{SYSLOGTIMESTAMP:timestamp}.*1C8 Srvr=\"%{USERNAME:server}\";Ref=\"%{USERNAME:database}\"; user: %{WORD:domain}\\\\%{WORD:username}.*address: %{IPORHOST:client} %{WORD:action}.*"]
	}
    }
    else if [message] =~ "parsec:" {
	mutate { replace => { "type" => "skud" } }
	grok {
            patterns_dir => "/etc/logstash/patterns"
            pattern => ".*parsec: %{DATESTAMP_PARSEC:timestamp}\t%{GREEDYDATA:direction}\t%{GREEDYDATA:username}\t%{GREEDYDATA:gate}"
	}
        date {
    	    locale => "en"
    	    match => [ "datetime" , "dd MMM YYYY HH:mm:ss" ]
	}
    }
    else if [message] =~ "%ASA-" {
        mutate { replace => { "type" => "extfwlog" } }

	grok {
	    patterns_dir => "/etc/logstash/patterns"
	    match => ["message", "%{CISCO_TAGGED_SYSLOG} %{GREEDYDATA:cisco_message}"]
	}

	syslog_pri { }

	grok {
	    break_on_match => false
	    patterns_dir => "/etc/logstash/patterns"
	    match => [
		"cisco_message", "%{CISCOFW106001}",
		"cisco_message", "%{CISCOFW106006_106007_106010}",
		"cisco_message", "%{CISCOFW106014}",
		"cisco_message", "%{CISCOFW106015}",
		"cisco_message", "%{CISCOFW106021}",
		"cisco_message", "%{CISCOFW106023}",
		"cisco_message", "%{CISCOFW106100}",
		"cisco_message", "%{CISCOFW110002}",
		"cisco_message", "%{CISCOFW302010}",
		"cisco_message", "%{CISCOFW302013_302014_302015_302016}",
		"cisco_message", "%{CISCOFW302020_302021}",
		"cisco_message", "%{CISCOFW305011}",
		"cisco_message", "%{CISCOFW313001_313004_313008}",
		"cisco_message", "%{CISCOFW313005}",
		"cisco_message", "%{CISCOFW402117}",
		"cisco_message", "%{CISCOFW402119}",
		"cisco_message", "%{CISCOFW419001}",
		"cisco_message", "%{CISCOFW419002}",
		"cisco_message", "%{CISCOFW500004}",
		"cisco_message", "%{CISCOFW602303_602304}",
		"cisco_message", "%{CISCOFW710001_710002_710003_710005_710006}",
		"cisco_message", "%{CISCOFW713172}",
		"cisco_message", "%{CISCOFW733100}",
		"cisco_message", "%{CISCOFW713204}",
		"cisco_message", "%{WORD:action} %{WORD:protocol} %{CISCO_REASON:reason} from %{DATA:src_interface}:%{IP:src_ip}/%{INT:src_port} to %{DATA:dst_interface}:%{IP:dst_ip}/%{INT:dst_port}; %{GREEDYDATA:dnssec_validation}",
		"cisco_message", "%{CISCO_ACTION:action} %{WORD:protocol} %{CISCO_REASON:reason}.*(%{IP:src_ip}).*%{IP:dst_ip} on interface %{GREEDYDATA:interface}",
		"cisco_message", "Connection limit exceeded %{INT:inuse_connections}/%{INT:connection_limit} for input packet from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} on interface %{GREEDYDATA:interface}",
		"cisco_message", "TCP Intercept %{DATA:threat_detection} to %{IP:ext_nat_ip}/%{INT:ext_nat_port}.*(%{IP:int_nat_ip}/%{INT:int_nat_port}).*Average rate of %{INT:syn_avg_rate} SYNs/sec exceeded the threshold of %{INT:syn_threshold}.#%{INT}",
		"cisco_message", "Embryonic connection limit exceeded %{INT:econns}/%{INT:limit} for %{WORD:direction} packet from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} on interface %{GREEDYDATA:interface}"

	    ]
	}

	    geoip {
		add_tag => [ "GeoIP" ]
		database => "/etc/logstash/geoip/GeoLiteCity.dat" 
		source => "src_ip"
		add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
	    }

	    mutate {
                convert => [ "[geoip][coordinates]", "float" ]
            }


	    if [geoip][city_name] == "" { mutate { remove_field => "[geoip][city_name]" } }
	    if [geoip][continent_code] == "" { mutate { remove_field => "[geoip][continent_code]" } }
	    if [geoip][country_code2] == "" { mutate { remove_field => "[geoip][country_code2]" } }
	    if [geoip][country_code3] == "" { mutate { remove_field => "[geoip][country_code3]" } }
	    if [geoip][country_name] == "" { mutate { remove_field => "[geoip][country_name]" } }
	    if [geoip][latitude] == "" { mutate { remove_field => "[geoip][latitude]" } }
	    if [geoip][longitude] == "" { mutate { remove_field => "[geoip][longitude]" } }
	    if [geoip][postal_code] == "" { mutate { remove_field => "[geoip][postal_code]" } }
	    if [geoip][region_name] == "" { mutate { remove_field => "[geoip][region_name]" } }
	    if [geoip][time_zone] == "" { mutate { remove_field => "[geoip][time_zone]" } }
	

    }
    else {
	mutate { replace => { "type" => "syslog" } }
    }

}

